# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build_prod:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx3200m
      MULE_ENV: prod
      DEPLOYMENT_ENVIRONMENT: Production
      APPLICATION_NAME: demo-api-app-x7pljznb6xl12gh6

    steps:
      - checkout
      - run:
          name: Update Keystore
          command: |
            # Generate new keystore pass
            KEYSTORE_PASS=$(openssl rand -base64 16 | awk '{print substr($0,0,17)}')
            echo "export KEYSTORE_PASS=${KEYSTORE_PASS}" >> $BASH_ENV

            # Create new keystore
            keytool -genkey -keyalg RSA -alias mule \
              -keystore keystore.jks -storepass ${KEYSTORE_PASS} \
              -validity 360 -keysize 2048 \
              -noprompt -dname "CN=integration.mulesoft.com, OU=ID, O=MuleSoft, L=SF, S=CA, C=US" \
              -keypass ${KEYSTORE_PASS} \
              -deststoretype pkcs12

            mv ./keystore.jks ./src/main/resources/keystore.jks

      - run:
          name: Add Secrets To Project
          command: |
            # Create Properties file and add keystore password
            touch ./src/main/resources/temp-local.properties.yaml
            echo "keystore.password: \"${KEYSTORE_PASS}\"" >> ./src/main/resources/temp-local.properties.yaml
            echo "secrets:" >> ./src/main/resources/temp-local.properties.yaml

            # Get Secrets by [Enviornment-App-Name]
            SECRET_OUTPUT=$(curl "${SECRETS_API_URI}/${MULE_ENV}-${APPLICATION_NAME}" \
              -H "id:${SECRET_API_ID}" \
              -H "secret:${SECRET_API_SECRET}" \
              -H "client_id:${SECRETS_API_CLIENT_ID}" \
              -H "client_secret:${SECRETS_API_CLIENT_SECRET}" | jq '.secret')

            echo $SECRET_OUTPUT

            # Get all the secret keys
            SECRET_KEYS=$(echo ${SECRET_OUTPUT} | jq 'keys | .[]')

            echo $SECRET_KEYS
            for SECRET_KEY in ${SECRET_KEYS[@]}; do
              # Get Value from Key
              VALUE=$(echo ${SECRET_OUTPUT} | jq .${SECRET_KEY})
              TEMP="${SECRET_KEY//\"}: "${VALUE}""
              # Add to temp-Properties File
              echo -e "  ${TEMP}" >> ./src/main/resources/temp-local.properties.yaml
            done

            cat ./src/main/resources/temp-local.properties.yaml

      - run:
          name: Encrypt Secrets
          command: |            
            # Create Runtime Ecryption Key / Export to Platform Properties
            ENCRYPTION_KEY=$(openssl rand -base64 16 | awk '{print substr($0,0,17)}')
            echo "export ENCRYPTION_KEY=${ENCRYPTION_KEY}" >> $BASH_ENV
            # Encrypt Properties File & Clean Up
            curl -s -O https://docs.mulesoft.com/downloads/mule-runtime/4.2/secure-properties-tool.jar
            java -jar secure-properties-tool.jar \
              file encrypt \
              AES CBC \
              ${ENCRYPTION_KEY} \
              ./src/main/resources/temp-local.properties.yaml \
              ./src/main/resources/local.properties.yaml

            rm -f ./secure-properties-tool.jar
            rm -f ./src/main/resources/temp-local.properties.yaml

            cat ./src/main/resources/local.properties.yaml

      - run:
          name: Update Global.xml for deployment
          command: |
            # Remove Local Development Global Properties
            sed "22,26d"  ./src/main/mule/global.xml > ./src/main/mule/tmp.global.xml
            mv ./src/main/mule/tmp.global.xml ./src/main/mule/global.xml

            sed '22i<global-property doc:name="Global Property" name="https.port" value="${https.port}" />' ./src/main/mule/global.xml > ./src/main/mule/tmp.global.xml
            mv ./src/main/mule/tmp.global.xml ./src/main/mule/global.xml

            cat ./src/main/mule/global.xml

      - run: 
          name: Prod Build
          command: mvn -s circleci.settings.xml -DskipTests clean package
      - run:
          name: Deploy to Prod CloudHub
          command: mvn -s circleci.settings.xml -DskipTests deploy

  build_dev:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo

    environment:
      MAVEN_OPTS: -Xmx3200m
      MULE_ENV: dev
      DEPLOYMENT_ENVIRONMENT: Development
      APPLICATION_NAME: demo-api-app-x7pljznb6xl12gh6

    steps:
      - checkout
      - run:
          name: Update Keystore
          command: |
            # Generate new keystore pass
            KEYSTORE_PASS=$(openssl rand -base64 16 | awk '{print substr($0,0,17)}')
            echo "export KEYSTORE_PASS=${KEYSTORE_PASS}" >> $BASH_ENV

            # Create new keystore
            keytool -genkey -keyalg RSA -alias mule \
              -keystore keystore.jks -storepass ${KEYSTORE_PASS} \
              -validity 360 -keysize 2048 \
              -noprompt -dname "CN=integration.mulesoft.com, OU=ID, O=MuleSoft, L=SF, S=CA, C=US" \
              -keypass ${KEYSTORE_PASS} \
              -deststoretype pkcs12

            mv ./keystore.jks ./src/main/resources/keystore.jks

      - run:
          name: Add Secrets To Project
          command: |
            # Create Properties file and add keystore password
            touch ./src/main/resources/temp-local.properties.yaml
            echo "keystore.password: \"${KEYSTORE_PASS}\"" >> ./src/main/resources/temp-local.properties.yaml
            echo "secrets:" >> ./src/main/resources/temp-local.properties.yaml

            # Get Secrets by APP Name
            SECRET_OUTPUT=$(curl "${SECRETS_API_URI}/${MULE_ENV}-${APPLICATION_NAME}" \
              -H "id:${SECRET_API_ID}" \
              -H "secret:${SECRET_API_SECRET}" \
              -H "client_id:${SECRETS_API_CLIENT_ID}" \
              -H "client_secret:${SECRETS_API_CLIENT_SECRET}" | jq '.secret')

            # Get all the secret keys
            SECRET_KEYS=$(echo ${SECRET_OUTPUT} | jq 'keys | .[]')

            for SECRET_KEY in ${SECRET_KEYS[@]}; do
              # Get Value from Key
              VALUE=$(echo ${SECRET_OUTPUT} | jq .${SECRET_KEY})
              TEMP="${SECRET_KEY//\"}: "${VALUE}""
              # Add to temp-Properties File
              echo -e "  ${TEMP}" >> ./src/main/resources/temp-local.properties.yaml
            done

            cat ./src/main/resources/temp-local.properties.yaml

      - run:
          name: Encrypt Secrets
          command: |            
            # Create Runtime Ecryption Key / Export to Platform Properties
            ENCRYPTION_KEY=$(openssl rand -base64 16 | awk '{print substr($0,0,17)}')
            echo "export ENCRYPTION_KEY=${ENCRYPTION_KEY}" >> $BASH_ENV
            # Encrypt Properties File & Clean Up
            curl -s -O https://docs.mulesoft.com/downloads/mule-runtime/4.2/secure-properties-tool.jar
            java -jar secure-properties-tool.jar \
              file encrypt \
              AES CBC \
              ${ENCRYPTION_KEY} \
              ./src/main/resources/temp-secure.properties.yaml \
              ./src/main/resources/secure.properties.yaml

            rm -f ./secure-properties-tool.jar
            rm -f ./src/main/resources/temp-secure.properties.yaml

            cat ./src/main/resources/secure.properties.yaml

      - run:
          name: Update Global.xml for deployment
          command: |
            # Remove Local Development Global Properties
            sed "22,26d" ./src/main/mule/global.xml > ./src/main/mule/tmp.global.xml
            mv ./src/main/mule/tmp.global.xml ./src/main/mule/global.xml

            sed '22i<global-property doc:name="Global Property" name="https.port" value="${https.port}" />' ./src/main/mule/global.xml > ./src/main/mule/tmp.global.xml
            mv ./src/main/mule/tmp.global.xml ./src/main/mule/global.xml

            cat ./src/main/mule/global.xml

      - run: 
          name: Dev Build
          command: mvn -s circleci.settings.xml -DskipTests clean package
      - run:
          name: Deploy to Dev CloudHub
          command: mvn -s circleci.settings.xml -DskipTests deploy

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build_prod:
          context: prod-org
          filters:
            branches:
              only:
                - master
      - build_dev:
          context: dev-org
          filters:
            branches:
              only:
                - develop
